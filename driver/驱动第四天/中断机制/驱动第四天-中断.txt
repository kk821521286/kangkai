
【0】Linux中断机制依赖中断子系统
【1】linux中断子系统的两个功能：
	（1）维护了一个中断号码表
	   如果是内部中断：直接到内核 arch/arm/mach-s5pc100/include/mach/irqs.h
           如果是外部 IRQ_EINT(x) :arch/arm/plat-s5p/include/plat
      （2）维护了一个描述中断历程的表（数组），表里的每个成员 struct irq_desc
	   struct irq_desc 中有个很重要的成员，struct irqaction
            / include/linux/interrupt.h
	    struct?irqaction?{
                irq_handler_t handler;?// 指向中断服务程序?
                 unsigned?long?flags;?// 中断标志?，高电平，低电平触发中断 | 中断类型
                  unsigned?long?mask;?// 中断掩码?
                    const?char?*name;?// I/O设备名
?                       void *dev_id;?// 设备标识  
              struct?irqaction?*next;?// 指向下一个描述符
?			     int?irq;?// IRQ线?
	  struct?proc_dir_entry?*dir;?// 指向IRQn相关的/proc/irq/n目录的描述符
                          }
【2】注册中断流程
  （1）定义中断处理函数
	irqreturn_t my_handler_t(int irqno, void *dev_id )
	{
         return IRQ_HANDLED;//正常返回，代表中断处理完成
       	//return IRQ_NONE;(共享中断相关)
        }
   （2）使用requset_irq函数注册
       int request_irq(
			unsigned int irq,      //中断号
			irq_handler_t handler,  //中断处理函数名
			unsigned long flags,    //外部中断的触发类型 | 中断类型
						//若设置了IRQF_DISABLED ，则表示中断处理程序被调用时屏蔽所有中断
						//若设置了IRQF_SHARED ，则表示多个设备共享中断；
                                                //触发类型 IRQF_TRIGGER_RISING

	    		const char *name,       //中断名称
			void *dev_id            //传参，可以向中断处理函数传参数
                      )；

   （3）释放中断号
      	free_irq(unsigned int irq,void *dev_id);
【3】使能禁止中断
	下列3个函数用于屏蔽和使能一个中断源。
	void disable_irq(int irq); //直接禁止
	void disable_irq_nosync(int irq); //等当期中断处理完成后再禁止
	void enable_irq(int irq);

【4】申请共享中断
      result = request_irq(sh_irq, xxx_interrupt,IRQF_SHARED, "xxx", xxx_dev); 
      （1）flag要写共享中断类型 IRQF_SHARE
      （2）参数必须传递 ，xxx_dev

【5】共享中断处理函数
     当中断发生时，共享中断的所有中断处理函数，都执行，在内部判断是否是自已的中断发生
     如果是，继续执行，如果不是，返回IRQ_NONE
     irqreturn_t  xxx_interrupt(int irq, void *dev_id)
 	{
		...
		int status = read_int_status();/*获知中断源*/
		if(!is_myint(dev_id,status))/*判断是否是本设备中断*/
		{
			return IRQ_NONE;  /*立即返回*/
		 }
		...
		return IRQ_HANDLED;			
	} 

【6】中断处理函数有两个限制：
	（1）尽快处理并返回  
        （2）不能有引起睡眠的语句 copy_to_user copy_from_user
 
【7】底半部机制
	顶半部：中断处理函数，简单快速的工作（只读取数据）
        底半部：慢还有可能引起睡眠的工作    （处理数据）

注意：顶半部和底半部最大的区别在于：底半部执行过程中可以相应硬件中断。

【8】底半部机制
	（1）软中断
        （2）tasklet（软中断的特例）   重点
	（3）工作队列（多线程的特例）  重点
	（4）多线程

【9】软中断和硬中断：软中断通常是硬中断服务程序对内核的中断



【10】tasklet 底半部机制的实现
	1---定义一个处理函数 
		void my_tasklet_func(unsigned  long); 
	2---定义一个tasklet结构my_tasklet，
        3---把中断处理函数和tasklet关联
	     tasklet_init
             my_tasklet_func(data)函数相关联 
             DECLARE_TASKLET(my_tasklet, my_tasklet_func, data);
        4--在中断处理函数中调度taskle 
	     tasklet_schedule(&my_tasklet); 

【11】tasklet 的特点：（1）快速，系统保证在一下个jiffies，软中断调度tasklet的函数
                      （2） 运行在中断下文，不能睡

【12】工作队列 的特点: （1）下半部函数执行时间不确定
                        （2）运行在进程上下文，可以睡

【13】工作队列的实现：

	1--定义一个工作队列 
		struct work_struct my_wq; 

	2-- 定义一个处理函数 
		void my_wq_func(unsigned long) ；

	3--初始化工作队列并将其与处理函数绑定 
		INIT_WORK(&my_wq, my_wq_func); 

	4--调度工作队列执行 
		schedule_work(&my_wq); 












